name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event.inputs.tag }}" != "" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version without 'v' prefix
        VERSION=$(echo "${{ steps.get_version.outputs.version }}" | sed 's/^v//')

        # Generate changelog content
        cat > CHANGELOG.md << 'EOF'
        ## What's Changed

        This release includes various improvements and bug fixes.

        ### 🚀 Features
        - Authentic CRT turn-off animations with proper phase ordering
        - Support for multiple animation modes (cool-down, warm-up, fade, scale-down)
        - Customizable frame counts, timing, and dimensions
        - High-performance Rust implementation

        ### 🔧 Improvements
        - Enhanced CLI with comprehensive options
        - Better error handling and validation
        - Improved documentation and examples

        ### 📦 Installation

        Download the appropriate binary for your platform from the assets below, or install from source:

        ```bash
        cargo install electron-beam
        ```

        ### 🎮 Usage

        ```bash
        # Create a classic CRT turn-off animation
        electron-beam -i input.png -o output.gif -m cool-down -f 30 -d 100
        ```

        **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.get_version.outputs.version }}
        EOF

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: ElectronBeam ${{ steps.get_version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: electron-beam
            asset_name: electron-beam-${{ needs.create-release.outputs.version }}-linux-x86_64
            compress: tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: electron-beam
            asset_name: electron-beam-${{ needs.create-release.outputs.version }}-linux-x86_64-musl
            compress: tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: electron-beam
            asset_name: electron-beam-${{ needs.create-release.outputs.version }}-linux-aarch64
            compress: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: electron-beam.exe
            asset_name: electron-beam-${{ needs.create-release.outputs.version }}-windows-x86_64.exe
            compress: zip
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: electron-beam
            asset_name: electron-beam-${{ needs.create-release.outputs.version }}-macos-x86_64
            compress: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: electron-beam
            asset_name: electron-beam-${{ needs.create-release.outputs.version }}-macos-aarch64
            compress: tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          sudo apt-get install -y musl-tools
        fi
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        fi

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --verbose

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if command -v strip > /dev/null 2>&1; then
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        fi

    - name: Create archive (Unix)
      if: matrix.compress == 'tar.gz'
      run: |
        cd target/${{ matrix.target }}/release/
        tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        cd ../../..

    - name: Create archive (Windows)
      if: matrix.compress == 'zip'
      run: |
        cd target/${{ matrix.target }}/release/
        7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        cd ../../..

    - name: Upload Release Asset (tar.gz)
      if: matrix.compress == 'tar.gz'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (zip)
      if: matrix.compress == 'zip'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (raw exe)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: "!contains(needs.create-release.outputs.version, '-')" # Only for non-prerelease
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Verify version matches tag
      run: |
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION=$(echo "${{ needs.create-release.outputs.version }}" | sed 's/^v//')
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch: Cargo.toml has $CARGO_VERSION but tag is $TAG_VERSION"
          exit 1
        fi

    - name: Run tests
      run: cargo test --all-features

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        if [ -n "$CARGO_REGISTRY_TOKEN" ]; then
          cargo publish --allow-dirty
        else
          echo "CARGO_REGISTRY_TOKEN not set, skipping crates.io publish"
          echo "To enable crates.io publishing, add CARGO_REGISTRY_TOKEN to repository secrets"
        fi

  create-homebrew-pr:
    name: Create Homebrew PR
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: "!contains(needs.create-release.outputs.version, '-')" # Only for non-prerelease
    steps:
    - name: Create Homebrew PR
      run: |
        echo "Homebrew formula update would be created here"
        echo "Version: ${{ needs.create-release.outputs.version }}"
        echo "This would typically use a tool like brew bump-formula-pr"
        # TODO: Implement actual Homebrew formula update
        # This requires setting up a Homebrew tap or submitting to homebrew-core

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release-complete:
    name: Release Complete
    runs-on: ubuntu-latest
    needs: [create-release, build-release, publish-crates]
    if: always()
    steps:
    - name: Check release status
      run: |
        if [[ "${{ needs.create-release.result }}" == "success" && "${{ needs.build-release.result }}" == "success" ]]; then
          echo "✅ Release ${{ needs.create-release.outputs.version }} completed successfully!"
          echo "📦 Binaries built for all platforms"
          if [[ "${{ needs.publish-crates.result }}" == "success" ]]; then
            echo "🚀 Published to crates.io"
          elif [[ "${{ needs.publish-crates.result }}" == "skipped" ]]; then
            echo "⏭️ Crates.io publish skipped (prerelease or no token)"
          else
            echo "⚠️ Crates.io publish failed"
          fi
        else
          echo "❌ Release failed"
          exit 1
        fi
