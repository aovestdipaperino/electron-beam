name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run CI daily at 02:00 UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          # Test minimum supported Rust version
          - os: ubuntu-latest
            rust: 1.70.0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run Clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check compilation
      run: cargo check --all-targets --all-features

    - name: Run tests
      run: cargo test --all-features --verbose

    - name: Run doctests
      run: cargo test --doc --all-features

    - name: Build release binary
      run: cargo build --release --verbose

    - name: Test CLI help
      run: cargo run --release -- --help

    - name: Test example creation
      run: cargo run --example create_test

    - name: Test CLI with generated image (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ -f "test_gradient.png" ]; then
          cargo run --release -- -i test_gradient.png -o test_output.gif -f 5 -d 200 --verbose
          ls -la test_output.gif
        fi

    - name: Test CLI with generated image (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path "test_gradient.png") {
          cargo run --release -- -i test_gradient.png -o test_output.gif -f 5 -d 200 --verbose
          Get-ChildItem test_output.gif
        }

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate code coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./cobertura.xml
        fail_ci_if_error: false

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install minimum Rust version
      uses: dtolnay/rust-toolchain@1.70.0

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Check with MSRV
      run: cargo check --all-targets --all-features

    - name: Test with MSRV
      run: cargo test --all-features

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: electron-beam
            asset_name: electron-beam-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: electron-beam.exe
            asset_name: electron-beam-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: electron-beam
            asset_name: electron-beam-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: electron-beam
            asset_name: electron-beam-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: runner.os != 'Windows'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Run cargo-deny
      run: cargo deny check

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --all-features --no-deps --document-private-items

    - name: Check for broken intra-doc links
      run: cargo doc --all-features --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: -D warnings

  all-checks:
    name: All Checks Pass
    runs-on: ubuntu-latest
    needs: [test, security, coverage, msrv, docs, cargo-deny]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.msrv.result }}" == "success" && \
              "${{ needs.docs.result }}" == "success" && \
              "${{ needs.cargo-deny.result }}" == "success" ]]; then
          echo "All checks passed!"
          exit 0
        else
          echo "Some checks failed!"
          exit 1
        fi
